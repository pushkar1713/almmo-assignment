This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
controller.ts
index.ts
routes.ts
validator.ts

================================================================
Files
================================================================

================
File: controller.ts
================
import { Request, Response } from "express";
import { Prisma, PrismaClient } from "../generated/prisma";
import { clickTrackingSchema, postBackSchema } from "./validator";

const prisma = new PrismaClient();

export class controller {
  static async clickTracking(req: Request, res: Response): Promise<void> {
    try {
      const payload = clickTrackingSchema.safeParse(req.query);

      if (!payload.success) {
        console.log(payload.error);
        res.status(400).json({ error: "Invalid request" });
        return;
      }

      const click = await prisma.clicks.create({
        data: {
          affiliateId: payload.data.affiliateId,
          campaignId: payload.data.campaignId,
          clickId: payload.data.clickId,
        },
      });

      res.status(200).json(click);
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: "Internal server error" });
      return;
    }
  }

  static async postBack(req: Request, res: Response): Promise<void> {
    try {
      const payload = postBackSchema.safeParse(req.query);

      if (!payload.success) {
        console.log(payload.error);
        res.status(400).json({ error: "Invalid request" });
        return;
      }

      const click = await prisma.clicks.findUnique({
        where: {
          clickId: payload.data.clickId,
          affiliateId: payload.data.affiliateId,
        },
      });

      if (!click) {
        res.status(400).json({ error: "Click not found" });
        return;
      }

      const conversion = await prisma.conversions.create({
        data: {
          clickId: payload.data.clickId,
          amount: payload.data.amount,
          currency: payload.data.currency,
        },
      });

      res.status(200).json({
        status: "success",
        message: "Conversion tracked",
      });
      return;
    } catch (error) {
      console.error(error);
      res.status(500).json({ error: "Internal server error" });
      return;
    }
  }
}

================
File: index.ts
================
import express, { Request, Response } from "express";
import router from "./routes";

const app = express();

app.use("/", router);

app.get("/", (req: Request, res: Response) => {
  res.send("Hello World");
});

app.listen(3000, () => {
  console.log("Server is running on port 3000");
});

================
File: routes.ts
================
import { Router } from "express";
import { controller } from "./controller";

const router = Router();

router.get("/click", controller.clickTracking);
router.get("/postback", controller.postBack);

export default router;

================
File: validator.ts
================
import { z } from "zod";

export const clickTrackingSchema = z.object({
  affiliateId: z.string(),
  campaignId: z.string(),
  clickId: z.string(),
});

export const postBackSchema = z.object({
  affiliateId: z.string(),
  clickId: z.string(),
  amount: z.number(),
  currency: z.string(),
});



================================================================
End of Codebase
================================================================
